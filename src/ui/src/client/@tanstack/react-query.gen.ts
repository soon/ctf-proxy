// This file is auto-generated by @hey-api/openapi-ts

import {
	type Options,
	healthCheckApiHealthGet,
	getServicesApiServicesGet,
	getServiceByPortApiServicesPortGet,
	getServiceRequestsApiServicesPortRequestsGet,
	getRequestDetailApiRequestsRequestIdGet,
	getRequestRawApiRequestsRequestIdRawGet,
	getServicePathStatsApiServicesPortPathsGet,
	getServiceQueryStatsApiServicesPortQueriesGet,
	getServiceHeaderStatsApiServicesPortHeadersGet,
	getTcpConnectionsApiServicesPortTcpConnectionsGet,
	getTcpConnectionDetailApiTcpConnectionsConnectionIdGet,
	getTcpConnectionStatsApiServicesPortTcpConnectionStatsGet,
} from "../sdk.gen";
import {
	queryOptions,
	infiniteQueryOptions,
	type InfiniteData,
} from "@tanstack/react-query";
import type {
	HealthCheckApiHealthGetData,
	GetServicesApiServicesGetData,
	GetServiceByPortApiServicesPortGetData,
	GetServiceRequestsApiServicesPortRequestsGetData,
	GetServiceRequestsApiServicesPortRequestsGetError,
	GetServiceRequestsApiServicesPortRequestsGetResponse,
	GetRequestDetailApiRequestsRequestIdGetData,
	GetRequestRawApiRequestsRequestIdRawGetData,
	GetServicePathStatsApiServicesPortPathsGetData,
	GetServiceQueryStatsApiServicesPortQueriesGetData,
	GetServiceHeaderStatsApiServicesPortHeadersGetData,
	GetTcpConnectionsApiServicesPortTcpConnectionsGetData,
	GetTcpConnectionsApiServicesPortTcpConnectionsGetError,
	GetTcpConnectionsApiServicesPortTcpConnectionsGetResponse,
	GetTcpConnectionDetailApiTcpConnectionsConnectionIdGetData,
	GetTcpConnectionStatsApiServicesPortTcpConnectionStatsGetData,
} from "../types.gen";
import { client } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
		_id: string;
		_infinite?: boolean;
		tags?: ReadonlyArray<string>;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean,
	tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl:
			options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (tags) {
		params.tags = tags;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const healthCheckApiHealthGetQueryKey = (
	options?: Options<HealthCheckApiHealthGetData>,
) => createQueryKey("healthCheckApiHealthGet", options);

/**
 * Health Check
 */
export const healthCheckApiHealthGetOptions = (
	options?: Options<HealthCheckApiHealthGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await healthCheckApiHealthGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: healthCheckApiHealthGetQueryKey(options),
	});
};

export const getServicesApiServicesGetQueryKey = (
	options?: Options<GetServicesApiServicesGetData>,
) => createQueryKey("getServicesApiServicesGet", options);

/**
 * Get Services
 */
export const getServicesApiServicesGetOptions = (
	options?: Options<GetServicesApiServicesGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getServicesApiServicesGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getServicesApiServicesGetQueryKey(options),
	});
};

export const getServiceByPortApiServicesPortGetQueryKey = (
	options: Options<GetServiceByPortApiServicesPortGetData>,
) => createQueryKey("getServiceByPortApiServicesPortGet", options);

/**
 * Get Service By Port
 */
export const getServiceByPortApiServicesPortGetOptions = (
	options: Options<GetServiceByPortApiServicesPortGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getServiceByPortApiServicesPortGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getServiceByPortApiServicesPortGetQueryKey(options),
	});
};

export const getServiceRequestsApiServicesPortRequestsGetQueryKey = (
	options: Options<GetServiceRequestsApiServicesPortRequestsGetData>,
) => createQueryKey("getServiceRequestsApiServicesPortRequestsGet", options);

/**
 * Get Service Requests
 */
export const getServiceRequestsApiServicesPortRequestsGetOptions = (
	options: Options<GetServiceRequestsApiServicesPortRequestsGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getServiceRequestsApiServicesPortRequestsGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getServiceRequestsApiServicesPortRequestsGetQueryKey(options),
	});
};

const createInfiniteParams = <
	K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
	queryKey: QueryKey<Options>,
	page: K,
) => {
	const params = {
		...queryKey[0],
	};
	if (page.body) {
		params.body = {
			...(queryKey[0].body as any),
			...(page.body as any),
		};
	}
	if (page.headers) {
		params.headers = {
			...queryKey[0].headers,
			...page.headers,
		};
	}
	if (page.path) {
		params.path = {
			...(queryKey[0].path as any),
			...(page.path as any),
		};
	}
	if (page.query) {
		params.query = {
			...(queryKey[0].query as any),
			...(page.query as any),
		};
	}
	return params as unknown as typeof page;
};

export const getServiceRequestsApiServicesPortRequestsGetInfiniteQueryKey = (
	options: Options<GetServiceRequestsApiServicesPortRequestsGetData>,
): QueryKey<Options<GetServiceRequestsApiServicesPortRequestsGetData>> =>
	createQueryKey("getServiceRequestsApiServicesPortRequestsGet", options, true);

/**
 * Get Service Requests
 */
export const getServiceRequestsApiServicesPortRequestsGetInfiniteOptions = (
	options: Options<GetServiceRequestsApiServicesPortRequestsGetData>,
) => {
	return infiniteQueryOptions<
		GetServiceRequestsApiServicesPortRequestsGetResponse,
		GetServiceRequestsApiServicesPortRequestsGetError,
		InfiniteData<GetServiceRequestsApiServicesPortRequestsGetResponse>,
		QueryKey<Options<GetServiceRequestsApiServicesPortRequestsGetData>>,
		| number
		| Pick<
				QueryKey<Options<GetServiceRequestsApiServicesPortRequestsGetData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<
						Options<GetServiceRequestsApiServicesPortRequestsGetData>
					>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									page: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getServiceRequestsApiServicesPortRequestsGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey:
				getServiceRequestsApiServicesPortRequestsGetInfiniteQueryKey(options),
		},
	);
};

export const getRequestDetailApiRequestsRequestIdGetQueryKey = (
	options: Options<GetRequestDetailApiRequestsRequestIdGetData>,
) => createQueryKey("getRequestDetailApiRequestsRequestIdGet", options);

/**
 * Get Request Detail
 */
export const getRequestDetailApiRequestsRequestIdGetOptions = (
	options: Options<GetRequestDetailApiRequestsRequestIdGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getRequestDetailApiRequestsRequestIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getRequestDetailApiRequestsRequestIdGetQueryKey(options),
	});
};

export const getRequestRawApiRequestsRequestIdRawGetQueryKey = (
	options: Options<GetRequestRawApiRequestsRequestIdRawGetData>,
) => createQueryKey("getRequestRawApiRequestsRequestIdRawGet", options);

/**
 * Get Request Raw
 */
export const getRequestRawApiRequestsRequestIdRawGetOptions = (
	options: Options<GetRequestRawApiRequestsRequestIdRawGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getRequestRawApiRequestsRequestIdRawGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getRequestRawApiRequestsRequestIdRawGetQueryKey(options),
	});
};

export const getServicePathStatsApiServicesPortPathsGetQueryKey = (
	options: Options<GetServicePathStatsApiServicesPortPathsGetData>,
) => createQueryKey("getServicePathStatsApiServicesPortPathsGet", options);

/**
 * Get Service Path Stats
 */
export const getServicePathStatsApiServicesPortPathsGetOptions = (
	options: Options<GetServicePathStatsApiServicesPortPathsGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getServicePathStatsApiServicesPortPathsGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getServicePathStatsApiServicesPortPathsGetQueryKey(options),
	});
};

export const getServiceQueryStatsApiServicesPortQueriesGetQueryKey = (
	options: Options<GetServiceQueryStatsApiServicesPortQueriesGetData>,
) => createQueryKey("getServiceQueryStatsApiServicesPortQueriesGet", options);

/**
 * Get Service Query Stats
 */
export const getServiceQueryStatsApiServicesPortQueriesGetOptions = (
	options: Options<GetServiceQueryStatsApiServicesPortQueriesGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getServiceQueryStatsApiServicesPortQueriesGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getServiceQueryStatsApiServicesPortQueriesGetQueryKey(options),
	});
};

export const getServiceHeaderStatsApiServicesPortHeadersGetQueryKey = (
	options: Options<GetServiceHeaderStatsApiServicesPortHeadersGetData>,
) => createQueryKey("getServiceHeaderStatsApiServicesPortHeadersGet", options);

/**
 * Get Service Header Stats
 */
export const getServiceHeaderStatsApiServicesPortHeadersGetOptions = (
	options: Options<GetServiceHeaderStatsApiServicesPortHeadersGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getServiceHeaderStatsApiServicesPortHeadersGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getServiceHeaderStatsApiServicesPortHeadersGetQueryKey(options),
	});
};

export const getTcpConnectionsApiServicesPortTcpConnectionsGetQueryKey = (
	options: Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>,
) =>
	createQueryKey("getTcpConnectionsApiServicesPortTcpConnectionsGet", options);

/**
 * Get Tcp Connections
 */
export const getTcpConnectionsApiServicesPortTcpConnectionsGetOptions = (
	options: Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getTcpConnectionsApiServicesPortTcpConnectionsGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey:
			getTcpConnectionsApiServicesPortTcpConnectionsGetQueryKey(options),
	});
};

export const getTcpConnectionsApiServicesPortTcpConnectionsGetInfiniteQueryKey =
	(
		options: Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>,
	): QueryKey<Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>> =>
		createQueryKey(
			"getTcpConnectionsApiServicesPortTcpConnectionsGet",
			options,
			true,
		);

/**
 * Get Tcp Connections
 */
export const getTcpConnectionsApiServicesPortTcpConnectionsGetInfiniteOptions =
	(options: Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>) => {
		return infiniteQueryOptions<
			GetTcpConnectionsApiServicesPortTcpConnectionsGetResponse,
			GetTcpConnectionsApiServicesPortTcpConnectionsGetError,
			InfiniteData<GetTcpConnectionsApiServicesPortTcpConnectionsGetResponse>,
			QueryKey<Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>>,
			| number
			| Pick<
					QueryKey<
						Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>
					>[0],
					"body" | "headers" | "path" | "query"
			  >
		>(
			// @ts-ignore
			{
				queryFn: async ({ pageParam, queryKey, signal }) => {
					// @ts-ignore
					const page: Pick<
						QueryKey<
							Options<GetTcpConnectionsApiServicesPortTcpConnectionsGetData>
						>[0],
						"body" | "headers" | "path" | "query"
					> =
						typeof pageParam === "object"
							? pageParam
							: {
									query: {
										page: pageParam,
									},
								};
					const params = createInfiniteParams(queryKey, page);
					const { data } =
						await getTcpConnectionsApiServicesPortTcpConnectionsGet({
							...options,
							...params,
							signal,
							throwOnError: true,
						});
					return data;
				},
				queryKey:
					getTcpConnectionsApiServicesPortTcpConnectionsGetInfiniteQueryKey(
						options,
					),
			},
		);
	};

export const getTcpConnectionDetailApiTcpConnectionsConnectionIdGetQueryKey = (
	options: Options<GetTcpConnectionDetailApiTcpConnectionsConnectionIdGetData>,
) =>
	createQueryKey(
		"getTcpConnectionDetailApiTcpConnectionsConnectionIdGet",
		options,
	);

/**
 * Get Tcp Connection Detail
 */
export const getTcpConnectionDetailApiTcpConnectionsConnectionIdGetOptions = (
	options: Options<GetTcpConnectionDetailApiTcpConnectionsConnectionIdGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } =
				await getTcpConnectionDetailApiTcpConnectionsConnectionIdGet({
					...options,
					...queryKey[0],
					signal,
					throwOnError: true,
				});
			return data;
		},
		queryKey:
			getTcpConnectionDetailApiTcpConnectionsConnectionIdGetQueryKey(options),
	});
};

export const getTcpConnectionStatsApiServicesPortTcpConnectionStatsGetQueryKey =
	(
		options: Options<GetTcpConnectionStatsApiServicesPortTcpConnectionStatsGetData>,
	) =>
		createQueryKey(
			"getTcpConnectionStatsApiServicesPortTcpConnectionStatsGet",
			options,
		);

/**
 * Get Tcp Connection Stats
 */
export const getTcpConnectionStatsApiServicesPortTcpConnectionStatsGetOptions =
	(
		options: Options<GetTcpConnectionStatsApiServicesPortTcpConnectionStatsGetData>,
	) => {
		return queryOptions({
			queryFn: async ({ queryKey, signal }) => {
				const { data } =
					await getTcpConnectionStatsApiServicesPortTcpConnectionStatsGet({
						...options,
						...queryKey[0],
						signal,
						throwOnError: true,
					});
				return data;
			},
			queryKey:
				getTcpConnectionStatsApiServicesPortTcpConnectionStatsGetQueryKey(
					options,
				),
		});
	};
