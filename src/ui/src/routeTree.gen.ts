/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ServicePortIndexRouteImport } from './routes/service/$port/index'
import { Route as ServicePortTcpStatsRouteImport } from './routes/service/$port/tcp-stats'
import { Route as ServicePortQueriesRouteImport } from './routes/service/$port/queries'
import { Route as ServicePortPathsRouteImport } from './routes/service/$port/paths'
import { Route as ServicePortHeadersRouteImport } from './routes/service/$port/headers'
import { Route as ServicePortTcpConnectionIdRouteImport } from './routes/service/$port/tcp-connection/$id'
import { Route as ServicePortRequestIdRouteImport } from './routes/service/$port/request/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicePortIndexRoute = ServicePortIndexRouteImport.update({
  id: '/service/$port/',
  path: '/service/$port/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicePortTcpStatsRoute = ServicePortTcpStatsRouteImport.update({
  id: '/service/$port/tcp-stats',
  path: '/service/$port/tcp-stats',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicePortQueriesRoute = ServicePortQueriesRouteImport.update({
  id: '/service/$port/queries',
  path: '/service/$port/queries',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicePortPathsRoute = ServicePortPathsRouteImport.update({
  id: '/service/$port/paths',
  path: '/service/$port/paths',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicePortHeadersRoute = ServicePortHeadersRouteImport.update({
  id: '/service/$port/headers',
  path: '/service/$port/headers',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicePortTcpConnectionIdRoute =
  ServicePortTcpConnectionIdRouteImport.update({
    id: '/service/$port/tcp-connection/$id',
    path: '/service/$port/tcp-connection/$id',
    getParentRoute: () => rootRouteImport,
  } as any)
const ServicePortRequestIdRoute = ServicePortRequestIdRouteImport.update({
  id: '/service/$port/request/$id',
  path: '/service/$port/request/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/service/$port/headers': typeof ServicePortHeadersRoute
  '/service/$port/paths': typeof ServicePortPathsRoute
  '/service/$port/queries': typeof ServicePortQueriesRoute
  '/service/$port/tcp-stats': typeof ServicePortTcpStatsRoute
  '/service/$port': typeof ServicePortIndexRoute
  '/service/$port/request/$id': typeof ServicePortRequestIdRoute
  '/service/$port/tcp-connection/$id': typeof ServicePortTcpConnectionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/service/$port/headers': typeof ServicePortHeadersRoute
  '/service/$port/paths': typeof ServicePortPathsRoute
  '/service/$port/queries': typeof ServicePortQueriesRoute
  '/service/$port/tcp-stats': typeof ServicePortTcpStatsRoute
  '/service/$port': typeof ServicePortIndexRoute
  '/service/$port/request/$id': typeof ServicePortRequestIdRoute
  '/service/$port/tcp-connection/$id': typeof ServicePortTcpConnectionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/service/$port/headers': typeof ServicePortHeadersRoute
  '/service/$port/paths': typeof ServicePortPathsRoute
  '/service/$port/queries': typeof ServicePortQueriesRoute
  '/service/$port/tcp-stats': typeof ServicePortTcpStatsRoute
  '/service/$port/': typeof ServicePortIndexRoute
  '/service/$port/request/$id': typeof ServicePortRequestIdRoute
  '/service/$port/tcp-connection/$id': typeof ServicePortTcpConnectionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/service/$port/headers'
    | '/service/$port/paths'
    | '/service/$port/queries'
    | '/service/$port/tcp-stats'
    | '/service/$port'
    | '/service/$port/request/$id'
    | '/service/$port/tcp-connection/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/service/$port/headers'
    | '/service/$port/paths'
    | '/service/$port/queries'
    | '/service/$port/tcp-stats'
    | '/service/$port'
    | '/service/$port/request/$id'
    | '/service/$port/tcp-connection/$id'
  id:
    | '__root__'
    | '/'
    | '/service/$port/headers'
    | '/service/$port/paths'
    | '/service/$port/queries'
    | '/service/$port/tcp-stats'
    | '/service/$port/'
    | '/service/$port/request/$id'
    | '/service/$port/tcp-connection/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ServicePortHeadersRoute: typeof ServicePortHeadersRoute
  ServicePortPathsRoute: typeof ServicePortPathsRoute
  ServicePortQueriesRoute: typeof ServicePortQueriesRoute
  ServicePortTcpStatsRoute: typeof ServicePortTcpStatsRoute
  ServicePortIndexRoute: typeof ServicePortIndexRoute
  ServicePortRequestIdRoute: typeof ServicePortRequestIdRoute
  ServicePortTcpConnectionIdRoute: typeof ServicePortTcpConnectionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service/$port/': {
      id: '/service/$port/'
      path: '/service/$port'
      fullPath: '/service/$port'
      preLoaderRoute: typeof ServicePortIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service/$port/tcp-stats': {
      id: '/service/$port/tcp-stats'
      path: '/service/$port/tcp-stats'
      fullPath: '/service/$port/tcp-stats'
      preLoaderRoute: typeof ServicePortTcpStatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service/$port/queries': {
      id: '/service/$port/queries'
      path: '/service/$port/queries'
      fullPath: '/service/$port/queries'
      preLoaderRoute: typeof ServicePortQueriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service/$port/paths': {
      id: '/service/$port/paths'
      path: '/service/$port/paths'
      fullPath: '/service/$port/paths'
      preLoaderRoute: typeof ServicePortPathsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service/$port/headers': {
      id: '/service/$port/headers'
      path: '/service/$port/headers'
      fullPath: '/service/$port/headers'
      preLoaderRoute: typeof ServicePortHeadersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service/$port/tcp-connection/$id': {
      id: '/service/$port/tcp-connection/$id'
      path: '/service/$port/tcp-connection/$id'
      fullPath: '/service/$port/tcp-connection/$id'
      preLoaderRoute: typeof ServicePortTcpConnectionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service/$port/request/$id': {
      id: '/service/$port/request/$id'
      path: '/service/$port/request/$id'
      fullPath: '/service/$port/request/$id'
      preLoaderRoute: typeof ServicePortRequestIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ServicePortHeadersRoute: ServicePortHeadersRoute,
  ServicePortPathsRoute: ServicePortPathsRoute,
  ServicePortQueriesRoute: ServicePortQueriesRoute,
  ServicePortTcpStatsRoute: ServicePortTcpStatsRoute,
  ServicePortIndexRoute: ServicePortIndexRoute,
  ServicePortRequestIdRoute: ServicePortRequestIdRoute,
  ServicePortTcpConnectionIdRoute: ServicePortTcpConnectionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
