package main

import (
	"strings"

	"github.com/proxy-wasm/proxy-wasm-go-sdk/proxywasm"
)

type Matcher struct {
	Path    func(string) bool
	Method  func(string) bool
	Headers map[string]string
	Body    func([]byte) bool
}

type MatcherResult struct {
	Path    bool
	Method  bool
	Headers bool
	Body    bool
}

func (r MatcherResult) All() bool {
	return r.Path && r.Method && r.Headers && r.Body
}

func MatchPrefix(prefix string) func(string) bool {
	return func(path string) bool {
		return strings.HasPrefix(path, prefix)
	}
}

func MatchMethod(expected string) func(string) bool {
	return func(actual string) bool {
		return strings.ToUpper(actual) == strings.ToUpper(expected)
	}
}

func MatchHttpRequest(matcher Matcher) func(ctx *WhenContext) bool {
	return func(ctx *WhenContext) bool {
		if ctx.Data == nil {
			ctx.Data = &MatcherResult{
				Path:    matcher.Path == nil,
				Method:  matcher.Method == nil,
				Headers: matcher.Headers == nil,
				Body:    matcher.Body == nil,
			}
		}
		var res = ctx.Data.(*MatcherResult)
		if ctx.Stage == StageRequestHeaders {
			if !res.Path && matcher.Path != nil {
				res.Path = matcher.Path(ctx.GetRequestHeader(":path"))
			}
			if !res.Method && matcher.Method != nil {
				res.Method = matcher.Method(ctx.GetRequestHeader(":method"))
			}
			if !res.Headers && matcher.Headers != nil {
				res.Headers = true
				for k, v := range matcher.Headers {
					res.Headers = res.Headers && (ctx.GetRequestHeader(k) == v)
				}
			}
		}
		if ctx.Stage == StageRequestBody {
			if !res.Body && matcher.Body != nil {
				if !ctx.End {
					ctx.Pause()
					return false
				}
				body, err := ctx.GetRequestBody(0, ctx.BodySize)
				if err != nil {
					return false
				}
				res.Body = matcher.Body(body)
			}
		}
		return res.All()
	}
}

func ModifyHttpResponseBody(modifyFunc func([]byte) []byte) func(ctx *DoContext) bool {
	return func(ctx *DoContext) bool {
		if ctx.Stage == StageResponseHeaders {
			ctx.DelResponseHeader("content-length")
			ctx.DelResponseHeader("content-encoding")
			proxywasm.AddHttpResponseTrailer("x-blocked", "1")
		}

		if ctx.Stage == StageResponseBody && !ctx.End {
			ctx.LogInfo("buffering response body")
			ctx.Pause()
			return false
		}

		if ctx.Stage == StageResponseBody && ctx.End {
			if b, err := ctx.GetResponseBody(0, ctx.BodySize); err == nil {
				newBody := modifyFunc(b)
				err = ctx.ReplaceResponseBody(newBody)
				if err != nil {
					ctx.LogInfo("failed to replace response body: " + err.Error())
				}
			}
			ctx.LogInfo("mofidied response body")
			return true
		}

		return false
	}
}

func DoReplaceHttpResponseBody(newBody []byte) func(ctx *DoContext) bool {
	return ModifyHttpResponseBody(func(_ []byte) []byte {
		return newBody
	})
}

func DoPause(ctx *DoContext) bool {
	proxywasm.ReplaceHttpRequestTrailer("x-blocked", "1")
	ctx.Pause()
	return true
}

func DoBlock(ctx *DoContext) bool {
	if ctx.Data == nil {
		proxywasm.ReplaceHttpRequestTrailer("x-blocked", "1")
		ctx.Data = ""
	}

	if ctx.Stage != StageResponseHeaders {
		return false
	}

	// If call before StageResponseHeaders, we'll pause request
	err := proxywasm.SendHttpResponse(418, nil, []byte("hey you"), -1)
	if err != nil {
		ctx.LogInfo("Failed to send HTTP response: " + err.Error())
	}

	// Required to avoid any further processing and passing request to the upstream
	ctx.Pause()
	return true
}

var bomb = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xed, 0xd4,
	0xfb, 0x4f, 0x53, 0x77, 0x14, 0x00, 0xf0, 0xdb, 0x4a, 0x1d, 0xcf, 0x75,
	0x23, 0x93, 0xb0, 0x29, 0x8f, 0xa9, 0x38, 0x11, 0xdb, 0xb1, 0x65, 0x18,
	0xc7, 0xa3, 0xb2, 0xb0, 0x05, 0x18, 0x53, 0x50, 0xe6, 0xd8, 0x28, 0x45,
	0x98, 0x01, 0x45, 0x28, 0x88, 0x0c, 0x10, 0xa1, 0xf4, 0x66, 0xc3, 0xd5,
	0xa8, 0x01, 0x1f, 0x38, 0x1c, 0x53, 0x2a, 0x13, 0xe4, 0x35, 0x1e, 0x13,
	0xbc, 0xe5, 0x21, 0x85, 0x48, 0xa4, 0x06, 0x36, 0x3a, 0xe5, 0x51, 0xa0,
	0xc0, 0x85, 0x11, 0x64, 0x82, 0x50, 0x04, 0xa1, 0x40, 0xa1, 0x0c, 0x68,
	0xd7, 0x7e, 0x93, 0xfd, 0x01, 0xcb, 0x92, 0x73, 0x7f, 0x3c, 0x39, 0xf7,
	0x9e, 0xf3, 0x3d, 0xdf, 0xcf, 0xb9, 0x36, 0x17, 0x0c, 0xb1, 0xf5, 0x67,
	0xc3, 0xf3, 0xfe, 0x5c, 0xb3, 0xa6, 0xb6, 0x7e, 0xc9, 0x50, 0x43, 0xd8,
	0x77, 0x63, 0xb4, 0x58, 0xea, 0xb7, 0xa6, 0xc1, 0x19, 0xaf, 0x9b, 0xdb,
	0xef, 0x68, 0xde, 0x68, 0x4f, 0xb8, 0xba, 0x87, 0x9f, 0xb3, 0x73, 0x28,
	0xcc, 0xfb, 0xe9, 0x8d, 0x30, 0xfc, 0x6e, 0xd4, 0x60, 0x66, 0x18, 0x5e,
	0x6c, 0x6b, 0xfb, 0xa8, 0x98, 0x4d, 0x1a, 0xbf, 0x72, 0xe0, 0x5a, 0x8e,
	0x60, 0xcb, 0xb2, 0xe9, 0x54, 0xe7, 0xb2, 0x7a, 0xe5, 0x5d, 0xfe, 0xe2,
	0xb6, 0x47, 0x2b, 0x0b, 0xca, 0xdd, 0x2a, 0x85, 0x8b, 0x7a, 0x96, 0xe4,
	0xab, 0x64, 0x42, 0xb5, 0x82, 0xae, 0xf9, 0x3e, 0x36, 0xc8, 0xef, 0x9b,
	0xcf, 0xb0, 0x27, 0x9b, 0x31, 0x7e, 0xc7, 0x78, 0x5f, 0x02, 0x7f, 0xa3,
	0x36, 0xac, 0x96, 0x99, 0x8d, 0x94, 0x19, 0xde, 0xc6, 0xf3, 0xcb, 0xb3,
	0x3b, 0xde, 0xd3, 0xc6, 0xdc, 0xab, 0x24, 0x0b, 0x55, 0xf4, 0x7d, 0x06,
	0x29, 0x0a, 0xd1, 0xd6, 0x78, 0x53, 0x6d, 0xf0, 0xb5, 0x89, 0x79, 0x55,
	0xd0, 0x03, 0x8b, 0xc1, 0x7b, 0x2c, 0xba, 0xac, 0xc3, 0x49, 0x97, 0xa9,
	0xcc, 0x3c, 0x26, 0xb7, 0xb8, 0x15, 0x3c, 0x4a, 0xf8, 0x58, 0x6d, 0xd0,
	0x06, 0x3f, 0xde, 0xdc, 0xc2, 0xf9, 0x95, 0x4b, 0x69, 0xfe, 0xf7, 0x27,
	0x3d, 0xa9, 0x62, 0x25, 0xfb, 0xb2, 0xf3, 0x3f, 0xb5, 0xcf, 0x25, 0x2c,
	0xf1, 0x98, 0xa1, 0x26, 0x53, 0x81, 0x42, 0x41, 0xe4, 0xd8, 0x5b, 0xda,
	0xa0, 0x6d, 0x6f, 0x72, 0x4b, 0x25, 0xd7, 0xc4, 0xaf, 0x3c, 0x4e, 0x9e,
	0x9f, 0x4e, 0xd1, 0x06, 0x7f, 0x5e, 0x6d, 0xb2, 0x9b, 0xc0, 0x86, 0x9f,
	0x04, 0xec, 0x1f, 0xb3, 0xd4, 0x25, 0x0e, 0xa7, 0xf4, 0x0a, 0xb6, 0x51,
	0x48, 0x55, 0xa9, 0x97, 0xbe, 0xb6, 0x8b, 0x9a, 0x95, 0x55, 0x41, 0x3b,
	0x5d, 0x2a, 0x6d, 0x72, 0x8a, 0x37, 0xd3, 0xb5, 0xee, 0x36, 0xd2, 0x43,
	0xd0, 0x0a, 0x65, 0x35, 0x13, 0x87, 0x24, 0xda, 0x18, 0xf6, 0xf8, 0xfb,
	0x53, 0x01, 0x51, 0x6c, 0x3c, 0xf6, 0x59, 0xc9, 0x0e, 0xe4, 0x8c, 0xb1,
	0xac, 0x89, 0xa6, 0xcb, 0xb8, 0x62, 0xf9, 0x8b, 0x3c, 0x7d, 0x6d, 0x2b,
	0xbe, 0xd0, 0xa7, 0x9b, 0x7a, 0xbf, 0x6b, 0x74, 0x28, 0xbb, 0x56, 0xd7,
	0xfa, 0x5c, 0xce, 0x74, 0x94, 0x9c, 0xba, 0x36, 0xca, 0xa2, 0xa3, 0xda,
	0x18, 0x7e, 0xdc, 0xa3, 0xc6, 0x81, 0x60, 0x34, 0x56, 0xbf, 0x3c, 0x7c,
	0x55, 0x7f, 0xc6, 0xb9, 0xbd, 0xc2, 0xb9, 0x21, 0xaf, 0x46, 0x65, 0xaa,
	0x03, 0x52, 0x3b, 0xbd, 0x41, 0x6a, 0x17, 0x45, 0x09, 0x1e, 0x9f, 0x39,
	0xb9, 0x9f, 0xa3, 0x6b, 0x3d, 0xd9, 0x37, 0x89, 0xe0, 0x52, 0xc6, 0xe2,
	0xa3, 0xeb, 0x90, 0xb1, 0xe5, 0xf6, 0x6d, 0x92, 0x5b, 0x84, 0x04, 0x2d,
	0x16, 0x7b, 0xeb, 0xcf, 0x98, 0x7c, 0xc3, 0x57, 0x75, 0x72, 0xfb, 0x60,
	0x72, 0xc3, 0x26, 0xa4, 0xb6, 0x84, 0x1c, 0x35, 0x27, 0xb0, 0xf2, 0xd9,
	0xa4, 0xea, 0x3b, 0x65, 0xba, 0xd6, 0xeb, 0x0b, 0x5c, 0xe5, 0x04, 0x36,
	0xeb, 0x2c, 0xe2, 0x20, 0x63, 0xf3, 0x9b, 0x3c, 0xcf, 0x35, 0x71, 0x64,
	0xf2, 0x3a, 0x91, 0x33, 0xba, 0xb5, 0x15, 0xf0, 0xf6, 0x9a, 0x4f, 0xd5,
	0x93, 0xe7, 0x91, 0xda, 0xc3, 0x8a, 0x38, 0x23, 0x36, 0x2e, 0x5b, 0x74,
	0x0d, 0xf2, 0x97, 0xe9, 0x5a, 0x1f, 0xf0, 0xcf, 0xe1, 0xb2, 0xf1, 0x33,
	0x37, 0xe5, 0x4c, 0xfd, 0xd8, 0xb8, 0x3b, 0x13, 0x1f, 0x12, 0x34, 0xcb,
	0x2c, 0xf1, 0x09, 0xe4, 0x8c, 0xd6, 0xa3, 0xed, 0xac, 0x2d, 0x46, 0xf3,
	0x03, 0x31, 0x9f, 0x20, 0xb5, 0x5f, 0x28, 0x6b, 0xd2, 0x18, 0x8d, 0x91,
	0x3c, 0xeb, 0xb2, 0xa2, 0x48, 0x5d, 0xeb, 0x0a, 0x7b, 0x29, 0xc1, 0x70,
	0xaf, 0x6f, 0xe3, 0x66, 0xe9, 0xc7, 0xb6, 0x27, 0xb3, 0xee, 0x6b, 0x39,
	0xf5, 0xa2, 0xcf, 0x11, 0x27, 0xe4, 0x8c, 0x19, 0x33, 0x11, 0x36, 0xe9,
	0xc0, 0x52, 0x53, 0x1b, 0x58, 0x02, 0x4b, 0x60, 0x09, 0x2c, 0x31, 0x60,
	0x09, 0x2c, 0xd7, 0x13, 0x81, 0x25, 0xb0, 0x04, 0x96, 0xc0, 0x12, 0x03,
	0x96, 0xc0, 0x72, 0x7d, 0x6c, 0xc0, 0x12, 0x58, 0x02, 0x4b, 0x60, 0x09,
	0x2c, 0x81, 0xa5, 0xa6, 0x75, 0x60, 0x09, 0x2c, 0x81, 0x25, 0xb0, 0x04,
	0x96, 0xc0, 0x52, 0x53, 0x1b, 0x58, 0x02, 0x4b, 0x60, 0x09, 0x2c, 0x31,
	0x60, 0x09, 0x2c, 0x31, 0x60, 0x09, 0x2c, 0x35, 0xb5, 0x81, 0x25, 0xb0,
	0x04, 0x96, 0xc0, 0x12, 0x58, 0x02, 0x4b, 0x4d, 0x22, 0xb0, 0x04, 0x96,
	0xc0, 0x12, 0x58, 0x62, 0xc0, 0x12, 0x58, 0x62, 0xc0, 0x12, 0x58, 0x6a,
	0x12, 0x81, 0x25, 0xb0, 0x04, 0x96, 0xc0, 0x12, 0x58, 0x02, 0x4b, 0xcd,
	0xd8, 0x80, 0x25, 0xb0, 0x04, 0x96, 0xc0, 0x12, 0x58, 0xfe, 0xf7, 0x2c,
	0xa7, 0x84, 0x73, 0x93, 0xdd, 0x69, 0xa1, 0x93, 0xa6, 0x4d, 0xc7, 0xd3,
	0x62, 0x02, 0xd9, 0xbb, 0x82, 0x7e, 0xc4, 0xf7, 0x78, 0x7d, 0xea, 0x44,
	0xad, 0x39, 0x58, 0xfa, 0x80, 0x63, 0x3c, 0xfc, 0xfe, 0xd9, 0xf0, 0x4b,
	0x8d, 0xa7, 0x71, 0xfe, 0x95, 0xcf, 0x07, 0x3e, 0xda, 0xdc, 0x9d, 0xef,
	0x69, 0xb8, 0xd5, 0x92, 0xba, 0xd1, 0xee, 0x89, 0xb1, 0xa8, 0xda, 0xa0,
	0xad, 0x48, 0x3c, 0xfd, 0xe6, 0xe0, 0x59, 0xba, 0xae, 0xa7, 0xb1, 0x5d,
	0x64, 0x8e, 0xc1, 0x6f, 0x1e, 0x36, 0xe8, 0xe0, 0x48, 0xdf, 0x4a, 0x2e,
	0xe5, 0xce, 0xc8, 0x57, 0x41, 0x87, 0x90, 0x96, 0x94, 0x1c, 0x22, 0x9a,
	0xd2, 0x32, 0xd2, 0x89, 0xde, 0x85, 0xa8, 0x89, 0xf5, 0x0b, 0x1b, 0x7f,
	0x91, 0xe8, 0x76, 0xd3, 0x1f, 0x59, 0x95, 0xf8, 0x6b, 0x31, 0xbe, 0xd4,
	0xa7, 0xb9, 0x74, 0x74, 0x70, 0x8a, 0x82, 0x1e, 0x02, 0x6b, 0x9f, 0xde,
	0xcd, 0x44, 0x37, 0x45, 0xc5, 0x64, 0x8b, 0xb0, 0x91, 0xe9, 0x13, 0xe8,
	0x5d, 0xc8, 0x43, 0x6d, 0xba, 0x18, 0x8d, 0xf3, 0x75, 0x39, 0x6d, 0xe8,
	0xaa, 0xd4, 0xb6, 0x88, 0xde, 0xa1, 0xcc, 0xfc, 0x21, 0x40, 0x07, 0xa7,
	0x6c, 0x5f, 0xa5, 0x15, 0x91, 0x64, 0x91, 0x85, 0x6e, 0x0a, 0x2f, 0xab,
	0x94, 0x8d, 0x9f, 0x4a, 0xba, 0x87, 0xde, 0xc5, 0x44, 0x05, 0x7d, 0xdc,
	0x22, 0x64, 0x89, 0xe3, 0x3b, 0x8a, 0xbc, 0xee, 0xc9, 0x19, 0x91, 0x5f,
	0xc5, 0x93, 0xfe, 0xf2, 0x40, 0xf7, 0x59, 0x15, 0xb1, 0x4a, 0xab, 0xca,
	0xf5, 0x82, 0x0f, 0xb2, 0x29, 0x2a, 0x71, 0x6b, 0x17, 0xc3, 0xbd, 0xe6,
	0x7e, 0x2f, 0x72, 0x17, 0x13, 0x09, 0xdd, 0x82, 0x78, 0x13, 0x47, 0x75,
	0x59, 0x41, 0x1c, 0xf2, 0xfa, 0xed, 0xb2, 0xe9, 0x09, 0xef, 0x46, 0xd7,
	0x97, 0x6f, 0xa3, 0xfb, 0xbc, 0xfc, 0xc1, 0x2a, 0xad, 0xc0, 0x9c, 0x87,
	0x76, 0xc8, 0xa6, 0xf0, 0xc8, 0xb0, 0x71, 0x8b, 0x5b, 0x41, 0xc1, 0xe8,
	0x2f, 0x22, 0xc1, 0xe5, 0x79, 0x53, 0x2d, 0xcd, 0x92, 0x2f, 0x6b, 0xff,
	0x10, 0x79, 0xfd, 0x60, 0xc0, 0xc2, 0xdc, 0xf6, 0x10, 0xeb, 0xc5, 0x4b,
	0xe8, 0x3e, 0xa7, 0x66, 0xaf, 0xd2, 0x62, 0x48, 0xff, 0xbc, 0x82, 0x6c,
	0x8a, 0x58, 0x71, 0x37, 0xde, 0xc4, 0x8f, 0x59, 0x8e, 0xfe, 0x22, 0xea,
	0xac, 0xe6, 0x42, 0xfb, 0xa9, 0x17, 0x1b, 0xc6, 0x9f, 0xdd, 0x40, 0x56,
	0xa5, 0xb0, 0x24, 0x25, 0xd9, 0xdc, 0x91, 0xce, 0x43, 0xf7, 0x39, 0x75,
	0xdf, 0xef, 0x04, 0xed, 0xfa, 0x0f, 0xc7, 0x62, 0xbd, 0x91, 0x4d, 0x21,
	0x13, 0x7b, 0x6a, 0x69, 0x3b, 0xb3, 0x02, 0xd0, 0x5f, 0x44, 0xff, 0xab,
	0xaa, 0x8a, 0x68, 0x4a, 0x33, 0x39, 0xfb, 0xcd, 0x01, 0x64, 0x55, 0x3a,
	0x0e, 0x8b, 0xdd, 0x8c, 0xae, 0x0b, 0x58, 0xe8, 0x3e, 0x37, 0x08, 0xc3,
	0xe5, 0xd4, 0xcf, 0x5a, 0x2b, 0xab, 0xf3, 0x90, 0x4d, 0x51, 0xd4, 0x45,
	0xf5, 0x53, 0x33, 0x5b, 0x4b, 0xd0, 0x5f, 0x44, 0xb4, 0x80, 0xf7, 0xa5,
	0x08, 0x1b, 0x56, 0x9c, 0x71, 0x2e, 0x40, 0x56, 0x05, 0x58, 0x02, 0x4b,
	0x60, 0x09, 0x2c, 0x81, 0x25, 0xb0, 0xc4, 0x80, 0x25, 0xb0, 0xd4, 0x64,
	0x02, 0x4b, 0x60, 0x09, 0x2c, 0x81, 0x25, 0xb0, 0x04, 0x96, 0x6b, 0x0f,
	0xb0, 0x04, 0x96, 0xc0, 0x12, 0x58, 0xae, 0x27, 0x02, 0x4b, 0x60, 0x09,
	0x2c, 0x81, 0x25, 0x06, 0x2c, 0x81, 0xa5, 0x26, 0x13, 0x58, 0x02, 0x4b,
	0x60, 0x09, 0x2c, 0x81, 0x25, 0xb0, 0x5c, 0x7b, 0x80, 0x25, 0xb0, 0x04,
	0x96, 0xc0, 0x12, 0x03, 0x96, 0xc0, 0x52, 0x13, 0x04, 0x96, 0xff, 0x3b,
	0x96, 0x2a, 0xc9, 0xda, 0x2c, 0xdd, 0xe7, 0xa5, 0xe4, 0xca, 0x82, 0xe8,
	0xa9, 0x94, 0x4f, 0x55, 0x2b, 0x96, 0x1c, 0x96, 0x66, 0x33, 0x1a, 0x96,
	0x54, 0x7c, 0xc9, 0xfc, 0x91, 0xa3, 0x33, 0x8f, 0x7d, 0x72, 0x31, 0x21,
	0xf6, 0x37, 0x45, 0x98, 0x81, 0xa0, 0x89, 0x67, 0x00, 0x00,
}

func DoBomb(ctx *DoContext) bool {
	proxywasm.ReplaceHttpRequestTrailer("x-blocked", "1")

	if ctx.Stage != StageResponseHeaders {
		return false
	}

	err := proxywasm.SendHttpResponse(200, [][2]string{
		{"content-encoding", "gzip, gzip, gzip"},
	}, bomb, -1)
	if err != nil {
		ctx.LogInfo("Failed to send HTTP response: " + err.Error())
	}

	ctx.Pause()
	return true
}
